#!/usr/bin/env python3
"""
Debug script ƒë·ªÉ ki·ªÉm tra ChromaDB v√† t√¨m l·ªói t·∫°i sao kh√¥ng truy xu·∫•t ƒë∆∞·ª£c d·ªØ li·ªáu
"""

import os
import sys
sys.path.append('backend')

from dotenv import load_dotenv
load_dotenv()

import chromadb
from chromadb.config import Settings

def debug_chromadb():
    """Debug ChromaDB collection"""
    print("üîç DEBUG CHROMADB")
    print("=" * 50)
    
    try:
        # K·∫øt n·ªëi ChromaDB
        chroma_client = chromadb.PersistentClient(
            path="backend/chroma_db",
            settings=Settings(anonymized_telemetry=False)
        )
        print("‚úÖ K·∫øt n·ªëi ChromaDB th√†nh c√¥ng")
        
        # L·∫•y collection theo backend
        use_openai = os.getenv("USE_OPENAI", "0") == "1"
        if use_openai:
            emb = os.getenv("OPENAI_EMBED_MODEL", "text-embedding-3-small").replace(":","_").replace("-","_")
            collection_name = f"documents_openai_{emb}"
        else:
            emb = os.getenv("OLLAMA_EMBED_MODEL", "llama2").replace(":","_").replace("-","_")
            collection_name = f"documents_ollama_{emb}"
        try:
            collection = chroma_client.get_collection(name=collection_name)
            print(f"‚úÖ T√¨m th·∫•y collection: {collection_name}")
        except Exception as e:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y collection: {e}")
            
            # Li·ªát k√™ t·∫•t c·∫£ collections
            collections = chroma_client.list_collections()
            print(f"üìã C√°c collections c√≥ s·∫µn: {[c.name for c in collections]}")
            
            if not collections:
                print("‚ùå Kh√¥ng c√≥ collection n√†o! C·∫ßn upload t√†i li·ªáu tr∆∞·ªõc.")
                return
            
            # S·ª≠ d·ª•ng collection ƒë·∫ßu ti√™n
            collection = collections[0]
            print(f"üîÑ S·ª≠ d·ª•ng collection: {collection.name}")
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng documents
        count = collection.count()
        print(f"üìä S·ªë l∆∞·ª£ng documents: {count}")
        
        if count == 0:
            print("‚ùå Collection r·ªóng! C·∫ßn upload t√†i li·ªáu.")
            return
        
        # L·∫•y sample documents
        print("\nüìÑ SAMPLE DOCUMENTS:")
        sample = collection.get(limit=5)
        documents = sample.get('documents', [])
        metadatas = sample.get('metadatas', [])
        ids = sample.get('ids', [])
        
        for i, (doc_id, doc, metadata) in enumerate(zip(ids, documents, metadatas)):
            print(f"\nDoc {i+1}:")
            print(f"  ID: {doc_id}")
            print(f"  Metadata: {metadata}")
            print(f"  Content: {doc[:200]}...")
        
        # Test search
        print("\nüîç TEST SEARCH:")
        test_queries = [
            "ph·ª• c·∫•p ƒÉn tr∆∞a",
            "l∆∞∆°ng",
            "Dalat Hasfarm",
            "tƒÉng",
            "khu v·ª±c"
        ]
        
        for query in test_queries:
            print(f"\nT√¨m ki·∫øm: '{query}'")
            try:
                # Test v·ªõi query_texts (keyword search)
                results = collection.query(
                    query_texts=[query],
                    n_results=3,
                    include=["documents", "metadatas", "distances"]
                )
                
                docs = results.get('documents', [[]])[0]
                distances = results.get('distances', [[]])[0]
                
                print(f"  T√¨m th·∫•y: {len(docs)} documents")
                for j, (doc, dist) in enumerate(zip(docs, distances)):
                    print(f"    Doc {j+1}: distance={dist:.3f}, content={doc[:100]}...")
                    
            except Exception as e:
                print(f"  ‚ùå L·ªói query_texts: {e}")
                
                # Fallback: where_document contains
                try:
                    results = collection.get(
                        where_document={"$contains": query},
                        limit=3
                    )
                    docs = results.get('documents', [])
                    print(f"  Fallback t√¨m th·∫•y: {len(docs)} documents")
                    for j, doc in enumerate(docs[:2]):
                        print(f"    Doc {j+1}: {doc[:100]}...")
                except Exception as e2:
                    print(f"  ‚ùå L·ªói where_document: {e2}")
        
        # Test embeddings
        print("\nüßÆ TEST EMBEDDINGS:")
        try:
            # Test OpenAI embeddings
            if os.getenv("USE_OPENAI") == "1" and os.getenv("OPENAI_API_KEY"):
                import openai
                client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
                
                response = client.embeddings.create(
                    model="text-embedding-3-small",
                    input="test embedding"
                )
                embedding = response.data[0].embedding
                print(f"‚úÖ OpenAI embeddings: {len(embedding)} dimensions")
                
                # Test vector search
                results = collection.query(
                    query_embeddings=[embedding],
                    n_results=3,
                    include=["documents", "distances"]
                )
                docs = results.get('documents', [[]])[0]
                distances = results.get('distances', [[]])[0]
                print(f"  Vector search t√¨m th·∫•y: {len(docs)} documents")
                for j, (doc, dist) in enumerate(zip(docs, distances)):
                    print(f"    Doc {j+1}: distance={dist:.3f}")
                    
            else:
                print("‚ö†Ô∏è  OpenAI embeddings kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh")
                
        except Exception as e:
            print(f"‚ùå L·ªói test embeddings: {e}")
        
        print("\n" + "=" * 50)
        print("‚úÖ DEBUG HO√ÄN TH√ÄNH")
        
    except Exception as e:
        print(f"‚ùå L·ªói debug: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_chromadb()
